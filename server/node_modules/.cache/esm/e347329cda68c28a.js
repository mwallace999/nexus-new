let express,http,Server,createBoard;_da6‍.w("express",[["default",["express"],function(v){express=v}]]);_da6‍.w("http",[["default",["http"],function(v){http=v}]]);_da6‍.w("socket.io",[["Server",["Server"],function(v){Server=v}]]);_da6‍.w("./controller/board",[["createBoard",["createBoard"],function(v){createBoard=v}]]);




const app = express();
const server = http.createServer(app);
const io = new Server(server);

// Add Rooms for multiuser handling, emit selectively
const dataStore = {
    users: []
}

// SOCKET.IO HANDLING
io.on('connection', (socket) => {
    dataStore.users.push(socket.id);
    const room = Room`${Math.ceil(dataStore.users.length/2)}`;
    socket.join(room); // XXZXX Make dynamic
    console.log(`A user connected: ${room}`);
    _da6‍.g.console.log('CURRENT USERS:', dataStore.users)

    socket.on('disconnect', () => {
        dataStore.users =  dataStore.users.filter((user) => user !== socket.id);
        console.log('A user disconnected');
        _da6‍.g.console.log('CURRENT USERS:', dataStore.users)
    });

    socket.on('syncNewGame', (setup) => {
        const board = createBoard(setup);
        const thisRoom = getRoom(socket)
        io.to(thisRoom).emit('newGame', board);
    });

    socket.on('syncBoardState', (boardState) => {
        console.log('SYNCING BOARD STATE');
        const thisRoom = getRoom(socket);
        _da6‍.g.console.log('THISROOM', thisRoom)
        io.to(thisRoom).emit('boardState',  boardState);
    })
});

const getRoom = (socket) => Array.from(socket.rooms)[1];

// START SERVER
const port = process.env.PORT || 3000;
server.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

