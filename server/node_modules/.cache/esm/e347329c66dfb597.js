let express,http,Server,createBoard;_66d‍.w("express",[["default",["express"],function(v){express=v}]]);_66d‍.w("http",[["default",["http"],function(v){http=v}]]);_66d‍.w("socket.io",[["Server",["Server"],function(v){Server=v}]]);_66d‍.w("./controller/board",[["createBoard",["createBoard"],function(v){createBoard=v}]]);




const app = express();
const server = http.createServer(app);
const io = new Server(server);

// DATA STORE
const dataStore = {
    // XXZXX -  Add data {socket: socket, room: room, player_number: player_number}
    users: [],
    rooms: [],
}

// HELPER FUNCTIONS
const getRoom = (socket) => Array.from(socket.rooms)[1];

// SOCKET.IO HANDLING
io.on('connection', (socket) => {
    const index = dataStore.rooms.findIndex((room) => room.length < 2);
    let room, playerNumber;

    if (index !== -1) {
        playerNumber = dataStore.rooms[index][0].playerNumber === 1 ? 2 : 1;
        room = index + 1;
        dataStore.rooms[index].push({
            socket: socket.id,
            playerNumber
        });
       
    } else {
        playerNumber = 1
        room = dataStore.rooms.length;
        dataStore.rooms.push([{
            socket: socket.id,
            playerNumber
        }]);
    }

    // XXZXX -  Need work -  Add user to first empty room / dynamically assign player #
    dataStore.users.push(socket.id);
    // const room = `Room${Math.ceil(dataStore.users.length/2)}`;
    socket.join(room);
    console.log(`A user connected to Room ${room}`);

    _66d‍.g.console.log('ROOMS', dataStore.rooms)

    //to get the number of clients in this room
    // const clients = io.sockets.adapter.rooms.get(room);
    // const playerNumber = clients ? clients.size : 0;

    io.to(socket.id).emit('thisPlayer', playerNumber);

    // console.log(`There are ${playerNumber} players in the room`);

    // console.log('CURRENT USERS:', dataStore.users)

    // function removeObjectById(arr, id) {
    //     arr.forEach((subArray, index) => {
    //       const itemIndex = subArray.findIndex((obj) => obj.id === id);
    //       if (itemIndex !== -1) {
    //         subArray.splice(itemIndex, 1);
    //         if (subArray.length === 0) {
    //           arr.splice(index, 1);
    //         }
    //       }
    //     });
    //   }

    socket.on('disconnect', () => {
        dataStore.users = dataStore.users.filter((user) => user !== socket.id);

        dataStore.rooms.forEach((room, index) => {
            const itemIndex = room.findIndex((client) => client.socket === socket.id);
            if (itemIndex !== -1) {
              room.splice(itemIndex, 1);
              if (room.length === 0) {
                dataStore.users.splice(index, 1);
              }
            }
          });

        console.log('A user disconnected');

        _66d‍.g.console.log('CURRENT USERS:', dataStore.users)
    });

    socket.on('syncNewGame', (setup) => {
        const board = createBoard(setup);
        const userRoom = getRoom(socket);
        const boardState = {
            tokens: [],
            board,
            activeHex: null,
            enemyHex: null
        }
        io.to(userRoom).emit('boardState', boardState);
    });

    socket.on('syncBoardState', (boardState) => {
        const userRoom = getRoom(socket);
        console.log(`SYNCING BOARD STATE: ${userRoom}`);
        io.to(userRoom).emit('boardState', boardState);
    })

    socket.on('syncRollResult', (rollResult) => {
        const userRoom = getRoom(socket);
        console.log(`SYNCING ROLL RESULT: ${userRoom}`);
        io.to(userRoom).emit('rollResult', rollResult);
    })

    socket.on('syncActiveModal', (activeModal) => {
        const userRoom = getRoom(socket);
        console.log(`SYNCING ACTIVE MODAL: ${userRoom}`);
        io.to(userRoom).emit('activeModal', activeModal);
    })

    socket.on('syncCurrentPlayer', (nextPlayer) => {
        const userRoom = getRoom(socket);
        console.log(`SYNCING CURRENT PLAYER: ${userRoom}`);
        io.to(userRoom).emit('currentPlayer', nextPlayer);
    })
    
});

// START SERVER
const port = process.env.PORT || 3000;
server.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

