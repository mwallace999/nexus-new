let express,http,Server,cors;_cb8‍.w("express",[["default",["express"],function(v){express=v}]]);_cb8‍.w("http",[["default",["http"],function(v){http=v}]]);_cb8‍.w("socket.io",[["Server",["Server"],function(v){Server=v}]]);_cb8‍.w("cors",[["default",["cors"],function(v){cors=v}]]);




const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(
  cors({
    origin: 'http://localhost:8080',
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  })
);


// Socket.io event handling
io.on('connection', (socket) => {
  console.log('A user connected');

  socket.on('makeMove', (moveData) => {
    // Broadcast the move to all connected clients, including the sender
    _cb8‍.g.console.log('MOVE DATA RECEIVED!!!', moveData)
    io.emit('moveReceived', moveData);
  });

  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });

  socket.on('generateBoard', (setup) => {
    // Broadcast the move to all connected clients, including the sender
    const { layout, colors } = setup;
    const hexCount = layout.reduce((acc, h) => acc + h, 0);
    const minCount = Math.floor(hexCount / colors.length);
    let extra = hexCount % colors.length;
    const countObj = {};

    colors.map(c => countObj[c] = minCount);
    while (extra) {
        const randColor = colors[ Math.floor(Math.random() * colors.length)];
        if (countObj[randColor] === minCount) {
            countObj[randColor]++;
            extra--;
        }
    }
    const fetchColor = () => {
        const randColor =  Object.keys(countObj)[ Math.floor(Math.random() * Object.keys(countObj).length)];
        countObj[randColor]--;
        if (!countObj[randColor]) delete countObj[randColor];
        return randColor;
    }
    const board = [];
    let hexId = 1;
    layout.forEach((rowCount, r) => {
        const hexRowArr = [];
        for (let i = 0; i < rowCount; i++) {
            const hexColor = fetchColor();
            hexRowArr.push({
                id: hexId++,
                row: r,
                index: i,
                hexColor,
                // hexBorderColor: hexColor
                tokenPlayer: 1
            })
        }
        board.push(hexRowArr);
    })
    
    _cb8‍.g.console.log('BOARD', board)
    // commit('setBoard', board);

    io.emit('newBoard', board);
  });
  
});

// Start the server
const port = process.env.PORT || 3000;
server.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

